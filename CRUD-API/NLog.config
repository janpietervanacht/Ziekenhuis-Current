<?xml version="1.0" encoding="utf-8" ?>
<!-- De volgende sectie is de logging van NLog zelf (internal logging) -->

<!-- Zet in properties de config file op COPY IF NEWER -->
<!-- Dan wordt in de uiteindelijke bin-package de meest recente config file gezet -->
<!-- 

// Voor Nlog(): installeer de volgende NuGetPackages:
        Nlog.Appsettings.Standard
        Nlog.Web.AspNetCore
        System.Data.SqlClient
		NLog.WindowsEventLog  

        Als de logging niet werkt (programma doet het, geen knaller
        maar de log-tabel in SQL server wordt niet gevuld)
        Kijk dan in de interne-logging van NLog

-->


<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwConfigExceptions="true"
      internalLogLevel="info"
      internalLogFile="c:\temp\internal-nlog-API.txt">
	<!-- ________________________________________________________  -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
		<add assembly="Nlog.WindowsEventLog" />
		<!-- windows event log -->
	</extensions>

	<!-- Haal informatie uit appsettings.json -->
	<targets>

		<!-- 1e target = logging naar een database-tabel -->

		<!-- Log info messages in tabel "dbo.Logs" -->
		<target name="databaseLogApiError" xsi:type="Database"
	 connectionString="${appsettings:name=ConnectionStrings.DefaultConnection}"
    >
			<commandText>
				insert into dbo.LogApiError (
				Application, Logged, Level, Message,
				Logger, CallSite, Exception
				) values (
				@Application, @Logged, @Level, @Message,
				@Logger, @Callsite, @Exception
				);
			</commandText>
			<parameter name="@application" layout="AspNetCoreNlog" />
			<parameter name="@logged" layout="${date}" />
			<parameter name="@level" layout="${level}" />
			<parameter name="@message" layout="${message}" />
			<parameter name="@logger" layout="${logger}" />
			<parameter name="@callSite" layout="${callsite:filename=true}" />
			<parameter name="@exception" layout="${exception:tostring}" />
		</target>

		<!-- 2e target = logging naar windows Event Log -->  
		<!-- Je bekijkt windows Event Log via de Event Viewer -->
		<!-- De source opgeven in power shell -->
		<!-- power shell opstarten vanuit windows start button -->
		<!-- of vanuit vergrootglas linksonder-->
		<!-- rechter muis: run as administrator -->
		
		<!-- geef het volgend op in Windows PowerShell:                    -->
		<!--  New-EventLog -LogName Application -Source CRUD-API           -->
		
		<!-- Bekijk de resultaten (Warning) in Event Viewer (tool om Windows Event Log te bekijken) -->
		<!-- gebruik in de explorer binnen Event Viewer Windows Logs - Application REFRESH -->
		
		<target xsi:type="EventLog"
			name="eventlog"
			eventid="1000"
			source="CRUD-API"  
			layout="${message}${newline}${exception:format=ToString}" Log="Application" machinename=".">
		</target>

	</targets>

	<rules>
		<logger name="*" level ="Error" writeTo="databaseLogApiError" />
		<logger name="*" level="Warn" writeTo="eventlog" />
	</rules>
</nlog>

<!--Create DB
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Log](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Application] [nvarchar](50) NOT NULL,
	[Logged] [datetime] NOT NULL,
	[Level] [nvarchar](50) NOT NULL,
	[Message] [nvarchar](max) NOT NULL,
	[Logger] [nvarchar](250) NULL,
	[Callsite] [nvarchar](max) NULL,
	[Exception] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
-->