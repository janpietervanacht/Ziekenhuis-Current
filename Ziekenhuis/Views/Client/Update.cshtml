@model Ziekenhuis.Ziekenhuis.ViewModels.ClientViewModel
@using Ziekenhuis.Model.ConstantsAndEnums

<!-- Onderstaande is niet goed, er is geen redisplay van ClientFullName -->
<!-- Bij het tonen van foutboodschappen -->
@*<h4>Wijzig Client @Model.ClientFullName</h4>*@


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <!-- We willen de errormessages verzamelen en tonen: -->
        <!-- De Summary box toont geen foutboodschappen op property level in de Summary box-->
        <!-- Maw de foutboodschappen vanuit Data Annotations komen bij de velden zelf -->
        <!-- Als ModelState.IsValid dan vervolgen we met de complexere custom made error messages -->
        <!-- Zoals bijvoorbeeld een check op een reguliere expressie, of een database integriteits-check -->
        <!-- excludePropertyErrors = true -->
        <!-- Alleen complexe, expliciet gecodeerde foutboodschappen tonen we in de ValidationSummary -->


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <!-- Zet alle velden, die niet op scherm muteerbaar zijn in HiddenFor : NIET VERGETEN !! -->
        <!-- Anders krijgt de controller deze velden niet meer terug in de POST aktie -->

        @Html.HiddenFor(c => c.Client.Id)
        @Html.HiddenFor(c => c.Client.DoctorId)


        <!-- Attentie, een veld dat op het scherm aan te passen is, mag niet -->
        <!-- een tweede keer in de HiddenForLijst verschijnen -->
        <!-- Onderstaande regel maakt BirthDate niet meer wijzigbaar-->
        @*@Html.HiddenFor(c => c.Client.BirthDate)*@


        @*@Html.HiddenFor(c => c.AgeInDays)
            @Html.HiddenFor(c => c.NrofPrescriptions)*@

        <div class="row" style="border: 1px solid #ff6a00; border-radius:5px;">

            <br />
            <div class="col-sm-10">


                <div class="form-group">
                    @Html.LabelFor(c => c.Client.ClientNumber, htmlAttributes:
                            new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(c => c.Client.ClientNumber,
                           new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                        @Html.ValidationMessageFor(c => c.Client.ClientNumber, "",
                                new { @class = "text-danger" })
                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(c => c.Client.ActionCode, htmlAttributes:
                            new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(c => c.Client.ActionCode, new SelectList(Enum.GetValues(typeof(ActionCode))),
                        "Actief/Inactief")
                </div>



                @*<div class="form-group">
                        @Html.Label("Actief/Inactief (A/I): ")
                        @Html.EditorFor(c => c.Client.ActionCode)
                        @Html.ValidationMessageFor(c => c.Client.ActionCode, "", new { @class = "text-danger" })
                    </div>*@


                @*@Html.Partial("_ClientUpdatePartial", Model)  VEROUDERDE SYNTAX *@
                <partial name="GedeeldeViewsClient/_ClientFieldsPartial" for="@Model" />

                <!-- derived fields - readonly -->
                <fieldset disabled>
                    <br /><br />
                    @Html.LabelFor(c => c.AgeInDays, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(c => c.AgeInDays, new
                        {
                            htmlAttributes =
                       new { @class = "form-control" }
                        })
                    </div>
                    <br />
                    @Html.LabelFor(c => c.NrofPrescriptions, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(c => c.NrofPrescriptions, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <br /> <br />
                </fieldset>

                <br />
                <div>
                    <input type="submit" value="Wijzig client" />
                </div>

            </div> <!-- end col-sm-10 -->

        </div> <!-- class = 'row' -->

        <br />
        <!-- Als de shared view niet direct onder een standaard View folder staat -->
        <!-- Bijvoorbeeld "Client" "Prescription" of "Shared" -->
        <!-- Gebruik dan onderstaande syntax met of zonder .cshtml extensie -->
        <partial name="GedeeldeViewsClient/_ButtonToClientListPartial.cshtml" for="@Model" />

        <!-- Onderstaande partial wordt alleen gezocht in de standard view folders: -->
        <!-- "Client", "Prescription", etc, en "Shared" -->
        <partial name="_ComplimentPartial" />

    </div> <!-- class = form-horizontal -->


}

